<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd"
>
    <context:property-placeholder location="classpath:props/kgraph_service.properties" />
    <context:annotation-config />

    <rabbit:connection-factory id="connectionFactory" host="${rabbitmq.host}" port="${rabbitmq.port}"
                               username="${rabbitmq.username}" password="${rabbitmq.password}"
                               virtual-host="${rabbitmq.virtual_host}" connection-timeout="5000"
                               publisher-confirms="true"
                               publisher-returns="true"/>

    <rabbit:admin connection-factory="connectionFactory"/>

    <rabbit:direct-exchange name="${rabbitmq.direct_exchange_name}">
        <rabbit:bindings>
            <rabbit:binding queue="${rabbitmq.queue_name}" key="${rabbitmq.routing_key}"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <rabbit:fanout-exchange name="kgraph_fanout_exchange" durable="false"/>

    <rabbit:direct-exchange name="${rabbitmq.rpc_direct_exchange_name}">
        <rabbit:bindings>
            <rabbit:binding queue="${rabbitmq.rpc_queue_name}" key="${rabbitmq.rpc_routing_key}"/>
            <!--rabbit:binding queue="${rabbitmq.rpc_reply_queue}" key="rpc_reply_routing"/-->
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <rabbit:queue name="master_queue"/>
    <rabbit:queue name="da_queue"/>
    <rabbit:queue name="dcc_queue"/>
    <rabbit:queue name="lineage_queue"/>
    <rabbit:queue name="risk_radar_queue"/>
    <rabbit:queue name="loan_agent_queue"/>
    <rabbit:queue name="real_estate_company_queue"/>
    <rabbit:queue name="test_queue"/>

    <rabbit:queue name="rpc_master_queue"/>
    <rabbit:queue name="rpc_da_queue"/>
    <rabbit:queue name="rpc_dcc_queue"/>
    <rabbit:queue name="rpc_lineage_queue"/>
    <rabbit:queue name="rpc_risk_radar_queue"/>
    <rabbit:queue name="rpc_loan_agent_queue"/>
    <rabbit:queue name="rpc_real_estate_company_queue"/>
    <rabbit:queue name="rpc_test_queue"/>

    <rabbit:queue name="rpc_reply_queue"/>


    <!--rabbit:template id="rabbitTemplate" connection-factory="connectionFactory"
                     confirm-callback="confirmCallBackHandler" mandatory="true"
                     return-callback="returnCallBackHandler"
                     use-temporary-reply-queues="false"
                     reply-address="${rabbitmq.rpc_reply_queue}"
                     reply-timeout="300000"
                     correlation-key="kgraph_correlation_id"
                     exchange="${rabbitmq.rpc_direct_exchange_name}"
                     routing-key="rpc_reply_routing"

    /-->

    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory"
                 confirm-callback="confirmCallBackHandler" mandatory="true"
                 return-callback="returnCallBackHandler"
                 reply-timeout="300000"
                 correlation-key="kgraph_correlation_id"
    />

    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="manual"
                               message-converter="jsonMessageConverter"  concurrency="1" max-concurrency="1">
        <rabbit:listener ref="${rabbitmq.message_handler}" queue-names="${rabbitmq.queue_name}"/>
        <rabbit:listener ref="rpcReplyHandler" queue-names="${rabbitmq.rpc_queue_name}"/>
    </rabbit:listener-container>


    <!--bean id="replyMessageListenerContainer"
          class="org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer">
        <property name="messageConverter" ref="jsonMessageConverter" />
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="messageListener" ref="rabbitTemplate" />
        <property name="queues" ref="${rabbitmq.rpc_reply_queue}" />
        <property name="acknowledgeMode" value="AUTO" />
    </bean-->

    <bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"/>

    <bean id="confirmCallBackHandler" class="com.bkjk.kgraph.message.handler.ConfirmCallBackHandler"/>

    <bean id="returnCallBackHandler" class="com.bkjk.kgraph.message.handler.ReturnCallBackHandler"/>

    <bean id="baseHandler" class="com.bkjk.kgraph.message.handler.GraphMessageHandler"/>

    <bean id="daHandler" class="com.bkjk.kgraph.message.handler.DAHandler"/>

    <bean id="dccHandler" class="com.bkjk.kgraph.message.handler.DCCHandler"/>

    <bean id="lineageHandler" class="com.bkjk.kgraph.message.handler.LineageHandler"/>

    <bean id="riskRadarHandler" class="com.bkjk.kgraph.message.handler.RiskRadarHandler"/>

    <bean id="loanAgentHandler" class="com.bkjk.kgraph.message.handler.LoanAgentHandler"/>

    <bean id="realEstateCompanyHandler" class="com.bkjk.kgraph.message.handler.RealEstateCompanyHandler"/>

    <bean id="testHandler" class="com.bkjk.kgraph.message.handler.TestHandler"/>

    <bean id="rpcReplyHandler" class="com.bkjk.kgraph.message.handler.RpcMessageHandler"/>

</beans>
